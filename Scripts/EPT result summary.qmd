---
title: "Breitenbach 2.0 - EPT"
author: "Viktor Baranov & Nathan Jay Baker"
editor: visual
date: 2024/11/13
format: 
  html: 
    code-overflow: wrap
    fig-height: 12
    fig-width: 12
    fig-format: svg
    eval: TRUE
    warning: false
---

# Load necessary packages

```{r}
library(tidyverse)
library(janitor)
library(reshape2)
library(SpadeR)
library(vegan)
library(codyn)
library(mobr)
library(iNEXT)
library(data.table)
```

# Load the EPT data

```{r}
#| warning: FALSE
ept <- fread("Breitenbach-EPT_summary_2_nathan.csv", header = TRUE, sep = ",") |> 
  as_tibble() |> 
  clean_names() |>                                                  # Homogenize column names
  rename_with(~ gsub("^x", "", .x), .cols = matches("^x[0-9]")) |>  # Change column names
  mutate(across(-c(ept, trap), ~ as.numeric(.x))) |>                # Make values numeric
  mutate(across(-c(ept, trap), ~ replace_na(.x, 0))) |>             # Convert NAs to 0
  mutate(sp_name = ept,                                             # Change column name
         sp_name = gsub(' k', '', sp_name),                         # Remove ' k' marker
         sp_name = gsub(' l', '', sp_name),                         # Remove ' l' marker
         sp_name = trimws(sp_name),                                 # Trim whitespace
         trap = trimws(trap)) |>                                    # Trim whitespace
  filter(sp_name != "Summe") |>                                     # Filter out unwanted rows
  select(ept, sp_name, trap, everything()) |>                       # Reorder columns
  arrange(sp_name) |>                                               # Sort data
  select(-ept)                                                      # Remove diptera column
head(ept)
```

# Initial data wrangling

```{r}
# Aggregate data according to species names and traps
ept_clean <- aggregate(ept[, 3:39],                # These are the columns (1969:2005)
                           list(sp_name = ept$sp_name, 
                                trap = ept$trap), 
                           sum) |> 
  # Sort data
  arrange(trap, sp_name)

# Convert dataset from wide to long format
ept_long <- ept_clean |> 
    pivot_longer(
    cols = starts_with("19") | starts_with("20"),          # Specify the year column to pivot
    names_to = "year",                                     # Name column that will hold year values
    values_to = "abundance"                                # Name column that will hold the counts
  ) |>
  mutate(trap_code = paste(trap, year, sep = "_")) |>     # create new column with trap_code (trap name + year)
  mutate(year = as.numeric(year)) |>                      # make year variable numeric
  filter(abundance != 0) |>                               # Remove rows where count is 0
  arrange(trap, year) 

# Reaggregate data according to species names and traps
ept_agg <- aggregate(ept_long[, 4], list(sp_name = ept_long$sp_name, 
                                         trap = ept_long$trap), sum) |> 
  as_tibble()

# Check if the columns of both the initial and aggregated dataset are the same
identical(sum(ept_agg$abundance, na.rm = F), 
          sum(ept_long$abundance, na.rm = F))

# Create species by site (trap) matrix in wide form
ept_wide <- ept_agg |> 
  group_by(sp_name, trap) |> 
  summarise(abundance = sum(abundance, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(
    names_from = trap, 
    values_from = abundance
  ) |> 
  column_to_rownames(var = "sp_name")

# Check if the columns of both the initial and aggregated dataset are the same
identical(sum(ept_agg$abundance, na.rm = T), 
          sum(ept_long$abundance, na.rm = T), 
          sum(ept_wide, na.rm = T))
```

\
