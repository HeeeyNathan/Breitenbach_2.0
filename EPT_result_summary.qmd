---
title: EPT STATS AND MODELS
author: Nathan Jay Baker & Viktor Baranov
editor: visual
date: "`r Sys.Date()`"
format:
  html:
    number-sections: true
    code-overflow: scroll
    colorlinks: true
    warning: false
    message: false
    code-fold: true
    fig-format: png
---

# Load necessary packages

```{r}
#| label: Load packges

library(tidyverse)
library(patchwork)
library(janitor)
library(SpadeR)
library(vegan)
library(codyn)
library(mobr)
library(iNEXT)
library(readxl)
library(writexl)
library(INLA)
library(DHARMa)
library(glmmTMB)
library(sjPlot)
library(ggeffects)
library(scales)
library(splines)
library(future.apply)
source("HighstatLibV15.R")
```

# Set plotting parameters

```{r}
#| label: Define plotting parametres

My_theme <- theme(panel.background = element_blank(),
                  panel.border = element_rect(fill = NA, linewidth = 1.25),
                  strip.background = element_rect(fill = "white", 
                                                  color = "white", linewidth = 1.25),
                  legend.position = "right",
                  text = element_text(size = 16),
                  axis.text.x = element_text(angle = 45, hjust = 1))
```

# Load the data

```{r}
#| label: Load data

ept <- read_xlsx("Data/Breitenbach_community_data_17.12.2024.xlsx") |>     # read in excel spreadsheet
  as_tibble() |>                                                           # Make tibble table
  clean_names() |>                                                         # Homogenize column names
  rename_with(~ gsub("^x", "", .x), .cols = matches("^x[0-9]")) |>         # Change column names
  filter(!str_detect(original_name, "Summe")) |>                           # delete rows containing "summe"
  filter(order %in% c("Ephemeroptera", "Plecoptera", "Trichoptera")) |>    # Keeps only EPT taxa
  dplyr::select(where(~ !is.numeric(.x) || sum(.x) != 0)) |>               # Removes empty (0) columns (i.e, 2006)
  mutate(trap_new = case_when(                                             # Homogenize trap names
    trap %in% c('Haus 0') ~ 'O',
    trap %in% c('Haus A', 'A/I') ~ 'A',
    trap %in% c('Haus I') ~ 'I',
    trap %in% c('Haus B', 'B / II', 'B-II-X', 'B/II', 'Haus B/II') ~ 'B',
    trap %in% c('Haus C-IV', 'C / IV', 'C-IV', 'C/IV', 'Haus C', 'Haus C/IV') ~ 'C',
    trap %in% c('Haus III') ~ 'III',
    trap %in% c('Haus D') ~ 'D',
    trap %in% c('Haus E - V', 'E / V', 'E-V', 'E/V', 'Haus E/V') ~ 'E',
    trap %in% c('Haus F - VI', 'F / VI', 'F-VI', 'F-VII', 'F/VI', 'Haus F/VI') ~ 'F',
    trap %in% c('Haus G', 'G-VII', 'G/ VII', 'G/VII', 'Haus G/VII') ~ 'G',
    trap %in% c('Quelle') ~ 'Source',
    TRUE ~ trap)) |>
  dplyr::select(-c(taxa_id:trap)) |>                                       # Remove unnecessary columns
  mutate(sp_name  = validated_name,                                        # Change column names
         trap     = trap_new,                                              # Change column names
         trap     = factor(trap)) |>                                       # make trap a factor
  arrange(trap, family, sp_name) |>                                        # Sort data
  dplyr::select(-c(validated_name, trap_new, order)) |>                    # Remove unnecessary columns
  dplyr::select(trap, sp_name, family, everything())                       # rearrange columns
```

# Initial data wrangling

```{r}
#| label: Initial data wrangling

ept_clean <- ept |>
  group_by(trap,
           sp_name,
           family) |>                                                      # Group by trap, sp_name, and family
  summarise(across(where(is.numeric),
                   ~sum(.x, na.rm = TRUE)),
                   .groups = "drop")

ept_long <- ept_clean |>
  pivot_longer(
    cols = starts_with("19") | starts_with("20"),                          # Specify the year column to pivot
    names_to = "year",                                                     # Name column that will hold year values
    values_to = "abundance") |>                                            # Name column that will hold the counts
  mutate(trap_code = paste(trap, year, sep = "_")) |>                      # New column: trap_code (trap + year)
  mutate(year = as.numeric(year)) |>                                       # make year variable numeric
  filter(abundance != 0) |>                                                # Remove rows where count is 0
  arrange(trap, year)                                                      # Sort data

ept_agg <- ept_long |>
  group_by(sp_name,
           trap,
           family) |>                                                        # Group by sp_name and trap
  summarise(abundance = sum(abundance),
            .groups = "drop") |>                                           # Summarise with the sum of "abundance"
  arrange(trap) |>                                                         # Sort data
  filter(!trap %in% c("F", "Source", "D", "O")) |>                              # Remove unwanted traps
  mutate(trap = factor(trap, levels = c("A", "B", "C", "E", "G", "I", "III")))

# total abundance of ept
ept_agg |>
  select(where(is.numeric)) |>
  unlist() |>
  sum(na.rm = TRUE)

# total species richness of diptera
ept_agg |> 
  summarise(unique_species = n_distinct(sp_name)) |> 
  pull(unique_species)

ept_wide <- ept_agg |>
  pivot_wider(names_from  = trap,
              values_from = abundance,
              values_fill = 0,
              values_fn   = sum) |>
  mutate(Overall = rowSums(across(where(is.numeric)))) |>
  arrange(sp_name)                                                         # Sort data

write_xlsx(ept_wide, "Taxonomy information/EPT_taxa_for_analysis.xlsx")

ept_wide_red <- ept_wide |>
  column_to_rownames(var = "sp_name") |>
  data.frame() |> 
  dplyr::select(-family)
```

# Calculating indices

## Chao's indices: species estimation in a single community

```{r}
#| label: Calculating Chao's indices

chaoA_ept       <- ChaoSpecies(ept_wide$A ,"abundance", k = 2, conf = 0.95)       # ept trap A
chaoB_ept       <- ChaoSpecies(ept_wide$B ,"abundance", k = 2, conf = 0.95)       # ept trap B
chaoC_ept       <- ChaoSpecies(ept_wide$C ,"abundance", k = 2, conf = 0.95)       # ept trap C
chaoE_ept       <- ChaoSpecies(ept_wide$E ,"abundance", k = 2, conf = 0.95)       # ept trap E
chaoG_ept       <- ChaoSpecies(ept_wide$G ,"abundance", k = 2, conf = 0.95)       # ept trap G
chaoI_ept       <- ChaoSpecies(ept_wide$I ,"abundance", k = 2, conf = 0.95)       # ept trap I
chaoIII_ept     <- ChaoSpecies(ept_wide$III ,"abundance", k = 2, conf = 0.95)     # ept trap III
chaoOverall_ept <- ChaoSpecies(ept_wide$Overall ,"abundance", k = 2, conf = 0.95) # Overall
```

## Extracting diversity profiles

This code chunk takes a long time to run, so it is included here as non-executable code. Below this chunk is an rds file with the outputs.

``` r
# Allow parallel processing
plan(multisession, workers = 7)  # Use 10 of your 20 available threads

# Monitor progress and increase memory limits
options(future.globals.maxSize = 2000 * 1024^2)  # 2GB limit for data transfer

attach(ept_wide) # makes each column a separate, accessible vector

# Claculating diversity profiles
Trap_A_diversity   <- Diversity(`A`, "abundance", q = c(0, 1, 2))
Trap_B_diversity   <- Diversity(`B`, "abundance", q = c(0, 1, 2))
Trap_C_diversity   <- Diversity(`C`, "abundance", q = c(0, 1, 2))
Trap_E_diversity   <- Diversity(`E`, "abundance", q = c(0, 1, 2))
Trap_G_diversity   <- Diversity(`G`, "abundance", q = c(0, 1, 2))
Trap_I_diversity   <- Diversity(`I`, "abundance", q = c(0, 1, 2))
Trap_III_diversity <- Diversity(`III`, "abundance", q = c(0, 1, 2))
Trap_Overall_diversity  <- Diversity(`Overall`, "abundance", q = c(0, 1, 2))

# List of trap names
trap_names <- ept_wide |>
  select(-sp_name, -family) |>
  colnames()

# Function to process each trap's diversity data
process_trap <- function(trap_name) {
  # Dynamically create the variable name for the trap
  trap_var <- get(paste0("Trap_", trap_name, "_diversity"))

  # Extract Hill numbers data
  df <- as.data.frame(trap_var$Hill_numbers)

  # Create data frames for each source using column positions
  # For ChaoJost: columns 1 (q), 2 (ChaoJost), 3 (95%Lower), 4 (95%Upper)
  chaojost_df <- data.frame(
    q = df[,1],
    Source = "ChaoJost",
    Value = df[,2],
    Lower_95 = df[,3],
    Upper_95 = df[,4],
    Trap = paste("Trap", trap_name)
  )

  # For Empirical: columns 1 (q), 5 (Empirical), 6 (95%Lower), 7 (95%Upper)
  empirical_df <- data.frame(
    q = df[,1],
    Source = "Empirical",
    Value = df[,5],
    Lower_95 = df[,6],
    Upper_95 = df[,7],
    Trap = paste("Trap", trap_name)
  )

  # Combine and arrange
  rbind(chaojost_df, empirical_df) |>
    arrange(Source)
}

# Apply the function to all traps and combine results into a single dataframe
all_traps_data <- bind_rows(lapply(trap_names, process_trap)) |>
                  arrange(Source)

# Clean up parallel processing
plan(sequential)  # Return to sequential processing

saveRDS(all_traps_data, "Outputs/ChoasDiversityProfilesEPT.rds")
```

## Load diversity profiles

```{r}
#| label: Load precalculated diversity profiles

Diversity_profiles <- readRDS("Outputs/ChoasDiversityProfilesEPT.rds")
```

## Plotting diversity profiles

```{r}
#| label: Plotting diversity profiles
#| fig-height: 12
#| fig-width: 12

# Define custom colours
custom_colours <- c("Chao-Jost-2015" = "#d95f02", "Empirical" = "#1b9e77")

# Calculate maximum y value (including confidence intervals)
y_max <- max(c(
  max(Diversity_profiles$Value, na.rm = TRUE),
  max(Diversity_profiles$Upper_95, na.rm = TRUE)
))

# Round up to nearest 5 for clean limits
y_max_rounded <- ceiling(y_max / 5) * 5

# Create the plot
Diversity_profiles |> 
  filter(!(Trap %in% c("Trap F", "Trap O"))) |> 
  mutate(
    Source = case_when(
      Source == "ChaoJost" ~ "Chao-Jost-2015",
      TRUE ~ Source
    ),
    Trap = case_when(
      Trap == "Trap Overall" ~ "Overall",
      TRUE ~ Trap
    )
  ) |> 
  # Plot the diversity profiles
  ggplot(aes(x = q, y = Value, colour = Source, group = interaction(Source, Trap))) +
  geom_hline(yintercept = seq(-10, y_max_rounded, by = 5), 
             color = "gray95", linewidth = 0.3) +
  geom_vline(xintercept = c(0, 1, 2), color = "gray95", linewidth = 0.3) +
  geom_ribbon(data = . %>% filter(Source == "Chao-Jost-2015"),
              aes(ymin = Lower_95, ymax = Upper_95, fill = Source),
              linetype = 0, alpha = 0.4, show.legend = FALSE) +
  geom_ribbon(data = . %>% filter(Source == "Empirical"),
              aes(ymin = Lower_95, ymax = Upper_95, fill = Source),
              linetype = 0, alpha = 0.4, show.legend = FALSE) +
  geom_line(linewidth = 0.8) +
  geom_point(size = 2, shape = 21, fill = "white", stroke = 0.8) +
  # Add text for points
  geom_text(data = . %>% filter(Source == "Chao-Jost-2015"),
            aes(label = round(Value, 1), color = Source),
            vjust = -0.8, size = 2.5, fontface = "bold", show.legend = FALSE) +
  geom_text(data = . %>% filter(Source == "Empirical"),
            aes(label = round(Value, 1), color = Source),
            vjust = 1.8, size = 2.5, fontface = "bold", show.legend = FALSE) +
  # Set labels
  labs(
    y = "Hill Numbers",
    x = "Order q",
    colour = "") +
  # Set consistent scales across facets
  facet_wrap(vars(Trap)) +
  scale_y_continuous(limits = c(-10, y_max_rounded), 
                     breaks = seq(0, y_max_rounded, by = 25)) +
  scale_x_continuous(breaks = seq(0, 2, by = 1), 
                     labels = c("0", "1", "2")) +
  # Apply color schemes
  scale_colour_manual(values = custom_colours) +
  scale_fill_manual(values = custom_colours) +
  # Apply theme
  theme_minimal() +
  theme(
    text = element_text(family = "Arial"),
    plot.title = element_text(size = 14, face = "bold", hjust = 0),
    plot.subtitle = element_text(size = 11, color = "gray30"),
    strip.background = element_rect(fill = "gray95", color = NA),
    strip.text = element_text(size = 12, face = "bold", margin = margin(5, 0, 5, 0)),
    axis.title = element_text(size = 11, face = "bold"),
    axis.text = element_text(size = 10),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.title.y = element_text(margin = margin(r = 10)),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "gray80", fill = NA, linewidth = 0.5),
    legend.position = "bottom",
    legend.margin = margin(t = 10),
    legend.title = element_text(size = 10, face = "bold"),
    legend.text = element_text(size = 9),
    legend.key.size = unit(1.2, "lines"),
    plot.margin = margin(15, 15, 10, 10)
  )

ggsave("Plots/EPT/Diversity_profiles_ept.png", width = 10, height = 7, dpi = 300, bg = "white")
```

## Summary statistics

```{r}
#| label: displaying summary statistics

ept_long |> 
  filter(trap %in% c("A", "B", "C", "E", "G", "I", "III")) |> 
  # group_by(trap) |>
  summarize(unique_species = n_distinct(sp_name), 
            total_abundance = sum(abundance))
```

## Standard community indices + turnover

```{r}
#| label: Calculating community indices

ept_long <- ept_long |> 
  filter(trap %in% c("A", "B", "C", "E", "G", "I", "III")) |>
  mutate(trap = factor(trap, levels = c("A", "B", "C", "E", "G", "I", "III")))

ept_long$ro.ab <- round(ept_long$abundance, digits = 0) # Round abundance to whole numbers for rarefaction
TD <- NULL                                              # Initialize empty data frame to store results

for (i in unique(ept_long$trap)) {                      # Loop through each unique trap in the dataset
  sub <- ept_long[ept_long$trap == i, ]                 # subset for current trap & reshape data
  sub_m <- sub |>
    dplyr::select(trap_code, sp_name, abundance) |>
    pivot_wider(names_from = sp_name, values_from = abundance, values_fill = 0)
  sub_ta <- sub_m[, -1]                                 # Remove trap_code column for calculations

  # Calculate diversity indices
  SppRich <- specnumber(sub_ta)                         # Species richness (total number of species)
  Simp <- diversity(sub_ta, index = "simpson")          # Simpson's diversity
  Shan <- diversity(sub_ta, index = "shannon")          # Shannon's diversity
  EvenJ <- Shan / log(SppRich)                          # Pielou's evenness
  E10 <- Shan / SppRich                                 # Shannon's evenness
  Abund <- rowSums(sub_ta)                              # Total abundance
  S_PIE <- calc_PIE(sub_ta, ENS = TRUE)                 # Effective number of common species

  # Calculate species turnover metrics between years
  DATA1_Turnover <- codyn::turnover(sub,
    time.var = "year",
    species.var = "sp_name",
    abundance.var = "abundance",
    replicate.var = NA,
    metric = "total")                                   # Total turnover (appearances + disappearances)
  Turnover <- c("NA", DATA1_Turnover$total)             # Add NA for first year

  DATA1_Turnover_app <- codyn::turnover(sub,            # Species appearances only
    time.var = "year",
    species.var = "sp_name",
    abundance.var = "abundance",
    replicate.var = NA,
    metric = "appearance")
  Turnover_app <- c("NA", DATA1_Turnover_app$appearance)

  DATA1_Turnover_disapp <- codyn::turnover(sub,         # Species disappearances only
    time.var = "year",
    species.var = "sp_name",
    abundance.var = "abundance",
    replicate.var = NA,
    metric = "disappearance")
  Turnover_disapp <- c("NA", DATA1_Turnover_disapp$disappearance)

  # Prepare data for rarefaction analysis
  sub_m_r <- sub |>
    dplyr::select(trap_code, sp_name, ro.ab) |>
    pivot_wider(names_from = sp_name,
      values_from = ro.ab,
      values_fill = 0)                                  # Create matrix with rounded abundances
  sub_ta_r <- sub_m_r[, -1]                             # Remove trap_code column

  # Calculate rarefied species richness
  rare.SppRich <- if (min(rowSums(sub_ta_r)) > 10) {
    rarefy(sub_ta_r, sample = min(rowSums(sub_ta_r)))
  } else {
    rarefy(sub_ta_r, sample = 10)
  }                                                     # If min sample size > 10, use that; otherwise use 10

  # Combine all calculated metrics into a data frame
  TD.i <- data.frame(sub_m$trap_code,
    SppRich,
    Simp,
    Shan,
    EvenJ,
    E10,
    Abund,
    S_PIE,
    Turnover,
    Turnover_app,
    Turnover_disapp,
    rare.SppRich)

  # Append results to main data frame
  TD <- rbind(TD, TD.i)

  # Clean up temporary variables to avoid conflicts in next iteration
  rm(TD.i, sub_m, sub_ta, sub, SppRich, Simp, Shan, EvenJ, E10, Abund, S_PIE,
    DATA1_Turnover, Turnover, DATA1_Turnover_app, Turnover_app,
    DATA1_Turnover_disapp, Turnover_disapp, sub_m_r, sub_ta_r, rare.SppRich)
}

# Clean up dataframe
TD <- TD |>
  as_tibble() |>                                       # Convert to tibble format for better handling
  rename(trap_code = sub_m.trap_code) |>               # Fix column name from earlier processing
  mutate(trap = gsub("_.*", "", trap_code),            # Remove everything after _ to get trap ID
         year = as.numeric(gsub(".*_", "", trap_code))) |> # Remove everything before _ to get year and convert to numeric
  filter(!(trap %in% c("F", "O"))) |> 
  mutate(
    trap_code = factor(trap_code),
    trap      = factor(trap),
    across(-c(trap_code, trap), as.numeric)) |>   # Convert other columns to numeric format
  dplyr::select(trap_code, trap, year, everything()) |> # Reorder columns: trap_code, trap, year first, then rest
  ungroup()                                            # Ungroup the data before further operations
```

```{r}
#| label: Check if data standardization worked

TD <- TD |> 
  mutate(
    year.std = MyStd(year))

TD$year.std2 <- (TD$year - mean(TD$year)) / sd(TD$year)

plot(TD$year, TD$year.std)

TD <- TD |> 
    dplyr::select(-year.std, -year.std2)
```

## Plotting

```{r}
#| label: Define plotting parameters

My_theme <- theme(panel.background = element_blank(),
                  panel.border = element_rect(fill = NA, linewidth = 1.25),
                  strip.background = element_rect(fill = "white", 
                                                  color = "white", linewidth = 1.25),
                  legend.position = "bottom",
                  text = element_text(size = 16))
```

### Turnover (total) by trap by year

```{r}
#| label: Plotting turnover by year
#| fig-height: 12
#| fig-width: 12

ggplot(TD |> 
         group_by(trap) |> 
         filter(n() > 3),
       aes(x = year, y = Turnover)) +
  geom_line() +      
  geom_smooth(method = "lm") +  
  # geom_smooth(method = "gam", col = "red") +
  geom_point(size = 2) +   
  geom_hline(yintercept = 0.5,            
             linetype = "dotted",           
             color = "grey50",               
             linewidth = 0.5) +    
  facet_wrap(~trap) +                        
  scale_x_continuous(breaks = seq(min(TD$year), max(TD$year), by = 3)) +
  scale_y_continuous(limits = c(0, max(TD$Turnover, na.rm = TRUE))) +  
  labs(title = "Turnover",  
       x = "Year",                            
       y = "Turnover",
       caption = "Species turnover over time by trap") +                      
  My_theme +                     
  My_theme +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.ticks.length = unit(0.25, "cm"))
```

### Turnover density

```{r}
#| label: Plotting overall turnover
#| fig-height: 8
#| fig-width: 12

p <- ggplot(TD, aes(x = Turnover)) + 
  geom_density(fill = "gray50", alpha = 0.5) +  
  geom_vline(xintercept = mean(TD$Turnover, na.rm = TRUE), 
             linetype = "dashed", 
             color = "black", 
             size = 1.2) +
  labs(title = "Turnover Rate Density",
       x = "Turnover Rate (Δ turnover per year)",  
       y = "Density",
       caption = "Dashed line indicates the mean turnover rate") +  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )
p
```

### Turnover density by trap

```{r}
#| label: Plotting turnover by trap
#| fig-height: 8
#| fig-width: 12

ggplot(TD, aes(x = Turnover, fill = trap)) + 
  geom_density(alpha = 0.3, colour = NA) +
  geom_vline(xintercept = mean(TD$Turnover, na.rm = TRUE), 
             linetype = "dashed", 
             color = "black", 
             size = 1.2) +
  labs(title = "Turnover Rate Density by Trap",
       x = "Turnover Rate (Δ turnover per year)",  
       y = "Density",
       fill = "Trap",
       colour = "Trap") +  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

```

### Abundance by trap by year

```{r}
#| label: Plotting abundance by year
#| fig-height: 12
#| fig-width: 12

ggplot(TD |> 
         group_by(trap) |> 
         filter(n() > 3),
       aes(x = year, y = Abund)) +
  geom_line() +   
  geom_smooth(method = "lm") +  
  # geom_smooth(method = "gam", col = "red") +
  geom_point(size = 2) + 
  geom_hline(yintercept = 0.5,
             linetype = "dotted", 
             color = "grey50", 
             size = 0.5) + 
  facet_wrap(~trap, scales = "free_y") + 
  scale_x_continuous(breaks = seq(min(TD$year), max(TD$year), by = 3)) +
  labs(title = "Abundance",  
       x = "Year", 
       y = "Abundance",
       caption = "Abundance through time by trap") + 
  My_theme +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.ticks.length = unit(0.25, "cm")) 
```

### Species richness by trap by year

```{r}
#| label: Plotting species richness by year
#| fig-height: 12
#| fig-width: 12

ggplot(TD |> 
         group_by(trap) |> 
         filter(n() > 3),
       aes(x = year, y = SppRich)) +
  geom_line() +   
  geom_smooth(method = "lm") +  
  # geom_smooth(method = "gam", col = "red") +
  geom_point(size = 2) +   
  # geom_hline(yintercept = 0.5,
  #            linetype = "dotted", 
  #            color = "grey50",
  #            size = 0.5) + 
  facet_wrap(~trap, scales = "free_y") + 
  scale_x_continuous(breaks = seq(min(TD$year), max(TD$year), by = 3)) +
  labs(title = "Species richness",  
       x = "Year",
       y = "Species richness",
       caption = "Species richness through time by trap") + 
  My_theme +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.ticks.length = unit(0.25, "cm")) 
```

### (Individual-based) rarefied species richness by trap by year

```{r}
#| label: Plotting rarefied species richness by year
#| fig-height: 12
#| fig-width: 12

ggplot(TD |> 
         group_by(trap) |> 
         filter(n() > 3),
       aes(x = year, y = rare.SppRich)) +
  geom_line() +   
  geom_smooth(method = "lm") +  
  # geom_smooth(method = "gam", col = "red") +
  geom_point(size = 2) +   
  # geom_hline(yintercept = 0.5, 
  #            linetype = "dotted", 
  #            color = "grey50", 
  #            size = 0.5) + 
  facet_wrap(~trap, scales = "free_y") + 
  scale_x_continuous(breaks = seq(min(TD$year), max(TD$year), by = 3)) +
  labs(title = "Rarefied species richness",  
       x = "Year",                            
       y = "Rarefied species richness",
       caption = "Rarefied species richness through time by trap") + 
  My_theme +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.ticks.length = unit(0.25, "cm")) 
```

# Rarefaction accumulation curves

## Calculation of rarefaction curves

This code chunk takes a long time to run, so it is included here as non-executable code. Below this chunk is an rds file with the outputs.

``` r
plan(multisession, workers = 15)  # Use 10 of your 20 available threads

# Monitor progress and increase memory limits
options(future.globals.maxSize = 3000 * 1024^3)  # 2GB limit for data transfer

ept_cum.rare = iNEXT(ept_wide_red, q = 0, datatype = "abundance")  # calculate accumulation curves

plan(sequential)  # Return to sequential processing

write_rds(ept_cum.rare, "Outputs/rarefaction_ept.rds")             # save output for quicker loading next time
```

## Load rarefaction data

```{r}
#| label: Loading precalculated rarefaction curves

ept_cum.rare <- readRDS("Outputs/rarefaction_ept.rds")               # load saved output
```

## Check outputs

### Basic information

Not super necessary for our purposes

``` r
ept_cum.rare$DataInfo
ept_cum.rare$AsyEst
```

## Plotting

### All accumulation curves in one plot

```{r}
#| label: Plotting all accumulation curves in the same plot - test
#| fig-height: 12
#| fig-width: 12

options(scipen = 999)                                               # Increase penalty to avoid scientific notation
ept_p <- ggiNEXT(ept_cum.rare, type = 1, color.var = "Assemblage")
ept_p <- ept_p + ggtitle("EPT")
ept_p <- ept_p + My_theme
ept_p <- ept_p + theme(legend.position = "bottom")
ept_p
```

```{r}
#| label: Plotting all accumulation curves in the same plot
#| fig-height: 12
#| fig-width: 12

Max_diptera_individuals <- 359482

# Create the base plot with ggiNEXT
p <- ggiNEXT(ept_cum.rare, type = 1, color.var = "Assemblage")

# Apply aesthetic enhancements to match your first plot
p <- p + 
  # Update theme elements
  geom_vline(xintercept = Max_diptera_individuals, color = "red", linetype = "dashed", linewidth = 0.8) +
  theme_minimal() +
  theme(
    text = element_text(family = "Arial"),
    axis.title = element_text(size = 11, face = "bold"),
    axis.text = element_text(size = 10),
    axis.text.x = element_text(margin = margin(t = 5), angle = 45, hjust = 1), # Added 45 degree angle
    axis.title.y = element_text(margin = margin(r = 10)),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "gray80", fill = NA, linewidth = 0.5),
    legend.position = "bottom",
    legend.margin = margin(t = 10),
    legend.title = element_text(size = 10, face = "bold"),
    legend.text = element_text(size = 9),
    legend.key.size = unit(1.2, "lines"),
    plot.margin = margin(15, 15, 10, 10)
  ) +
  # Set y-axis breaks every 50 units
  scale_y_continuous(
    labels = scales::comma,
    breaks = function(x) seq(0, max(x), by = 10)
  ) +
  # Set x-axis breaks every 10,000 units
  # scale_x_continuous(
  #   labels = scales::comma,
  #   breaks = function(x) seq(0, max(x), by = 100000)
  # ) +
  # # Set x-axis limit to 750,000 with breaks every 50,000 units
  # scale_x_continuous(
  #   limits = c(0, 300000),
  #   labels = scales::comma,
  #   breaks = seq(0, 300000, by = 25000)
  # ) +
  # Add custom axis labels
  labs(y = "Species richness (q = 0)")

# Update point and line aesthetics without changing colors
p$layers <- lapply(p$layers, function(layer) {
  # Find geom_line and modify it
  if(inherits(layer$geom, "GeomLine")) {
    layer$aes_params$linewidth <- 0.8
  }
  # Find geom_point and modify it
  if(inherits(layer$geom, "GeomPoint")) {
    layer$aes_params$size <- 2
    layer$aes_params$shape <- 21
    layer$aes_params$fill <- "white"
    layer$aes_params$stroke <- 0.8
  }
  # Modify ribbon/confidence interval if present
  if(inherits(layer$geom, "GeomRibbon")) {
    layer$aes_params$alpha <- 0.4
    layer$aes_params$linetype <- 0
  }
  return(layer)
})

p

# Save the plot
ggsave("Plots/EPT/Rarefaction_ept.png", p, width = 7, height = 7, dpi = 300, bg = "white")
```

### Accumulation curves in separate plots

```{r}
#| label: Plotting all accumulation curves in seperate plots
#| fig-height: 12
#| fig-width: 16

options(scipen = 999)                                               # Increase penalty to avoid scientific notation
ept_p1 <- ggiNEXT(ept_cum.rare, facet.var = "Assemblage", grey = T)
ept_p1 <- ept_p1 + ggtitle("EPT")
ept_p1 <- ept_p1 + My_theme
ept_p1 <- ept_p1 + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "bottom")
ept_p1
```

# Modelling

## Exploring the data

### Missing values

```{r}
#| label: Missing values

TD |> 
  group_by(trap) |> 
  summarise(across(c(Abund, SppRich, Turnover, year), 
                   ~ 100 * sum(is.na(.)) / n(), 
                   .names = "missing_{.col}"))
# Nice!!!
```

There are NA values, including some \~6% in turnover because the first year is always missing for each trap

### Data distribution

```{r}
#| label: Temporal replication (distribution)
#| fig-height: 12
#| fig-width: 12

trap_periods <- TD |> 
  group_by(trap) |> 
  summarise(
    start_year = min(year),
    end_year = max(year),
    obs_period = end_year - start_year + 1,  # Adding 1 since we want to include both start and end years
    n_years = n_distinct(year)  # This will show actual number of years sampled
  ) |> 
  mutate(
    missing_years = obs_period - n_years  # This will show gaps in sampling if any
  )

TD_sum <- TD |> 
   with(table(trap, year)) |> 
   as_tibble() |> 
   arrange(trap)

TD_sum |> 
     ggplot(aes(x = year, y = n, group = trap)) +
      geom_line() +
      geom_point() +
      facet_wrap(~trap) +
      theme_bw() +
      ylab("Number of samples") +
      xlab("Year") +
      theme(
        axis.title = element_text(family = "Arial", size = 12),
        axis.text.y = element_text(family = "Arial", size = 12),
        axis.text.x = element_text(family = "Arial", size = 8, angle = 45, vjust = 0.5, hjust = 1),
        strip.text = element_text(family = "Arial", size = 14, face = "bold"))

trap_periods <- TD |> 
  group_by(trap) |> 
  summarise(
    start_year = min(year),
    end_year = max(year),
    obs_period = end_year - start_year + 1,  # Adding 1 since we want to include both start and end years
    n_years = n_distinct(year)  # This will show actual number of years sampled
  ) |> 
  mutate(
    missing_years = obs_period - n_years  # This will show gaps in sampling if any
  )
```

### Outliers

```{r}
#| label: Outliers
#| fig-height: 12
#| fig-width: 12

MyVar <- c("SppRich", "Abund", "Turnover", "year")
Mydotplot(TD[, MyVar])
```

### Relationships

#### Abundance \~ year

```{r}
#| label: Relationship between abundance and year
#| fig-height: 12
#| fig-width: 12

p1 <- TD |>
  ggplot(aes(y = Abund, x = year)) +
  geom_smooth(method = "gam") +
  geom_smooth(method = "lm", col = "red") +
  labs(y = "EPT abundance",
       x = "Time") +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  scale_x_continuous(limits = c(1965, 2005)) +
  ylim(range(TD$Abund)) +
  My_theme
p1
# non-linear relationship
```

#### And, Abundance \~ year, factored by trap

```{r}
#| label: Relationship between abundance and year by trap
#| fig-height: 12
#| fig-width: 12

p1 + facet_wrap(~trap)
```

#### Species richness \~ year

```{r}
#| label: Relationship between species richness and year
#| fig-height: 12
#| fig-width: 12

p1 <- TD |>
  ggplot(aes(y = SppRich, x = year)) +
  geom_smooth(method = "gam") +
  geom_smooth(method = "lm", col = "red") +
  labs(y = "EPT species richness",
       x = "Time") +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  scale_x_continuous(limits = c(1965, 2005)) +
  ylim(range(TD$SppRich)) +
  My_theme
p1
# non-linear relationship
```

#### And, Species richness \~ year, factored by trap

```{r}
#| label: Relationship between species richness and year by trap
#| fig-height: 12
#| fig-width: 12

p1 + facet_wrap(~trap)
```

#### Turnover \~ year

```{r}
#| label: Relationship between turnover and year
#| fig-height: 12
#| fig-width: 12

p1 <- TD |>
  ggplot(aes(y = Turnover, x = year)) +
  geom_smooth(method = "gam") +
  geom_smooth(method = "lm", col = "red") +
  labs(y = "EPT species turnover",
       x = "Time") +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  scale_x_continuous(limits = c(1965, 2005)) +
  ylim(range(TD$Turnover)) +
  My_theme
p1
# postive, non-linear relationship
```

#### And, Turnover \~ year, factored by trap

```{r}
#| label: Relationship between turnover and year by trap
#| fig-height: 12
#| fig-width: 12

p1 + facet_wrap(~trap)
```

### Normality

```{r}
#| label: Normality
#| fig-height: 8
#| fig-width: 16

# First save the plots
p1 <- TD |> 
  ggplot(aes(Abund)) +
  geom_freqpoly(bins = 15) +
  labs(x = "EPT abundance",
       y = "Frequency",
       tag = "A") +  # Add panel label
  My_theme

p2 <- TD |> 
  ggplot(aes(SppRich)) +
  geom_freqpoly(bins = 15) +
  labs(x = "EPT species richness",
       y = "Frequency",
       tag = "B") +  # Add panel label
  My_theme

p3 <- TD |> 
  ggplot(aes(Turnover)) +
  geom_freqpoly(bins = 15) +
  labs(x = "EPT species turnover",
       y = "Frequency",
       tag = "C") +  # Add panel label
  My_theme

# Set up the plotting layout
# This creates a 1 row, 3 column layout
par(mfrow = c(1, 3))

# Print all plots
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)

# Poisson distribution should would for species richness and abundance, while the beta distribution should work for turnover data
```

### Zero inflation

```{r}
#| label: Zero inflation

# How many zeros do we have?
TD |> summarise(percentage_zero = sum(Abund == 0) / n() * 100)
# Nice!!!
```

## House keeping

```{r}
#| label: Data standardization

unique_years <- sort(unique(TD$year))
TD <- TD |> 
  mutate(
    year.std         = MyStd(year),
    fyear            = factor(year, levels = unique_years),                           # make year a factor
    cyear            = year - median(year),                                           # centered year
    ftrap            = factor(trap, levels = c("A", "B", "C", "E", "G", "I", "III"))) # make trap a factor
```

```{r}
#| label: Standardization check

# Compute mean and standard deviation of TD$year
year_mean <- mean(TD$year)
year_sd <- sd(TD$year)

# Back-transform to check if we recover the same values
min_year_back <- min(TD$year.std) * year_sd + year_mean
max_year_back <- max(TD$year.std) * year_sd + year_mean

# Print results
data.frame(
  Expected_Min_Year = min(TD$year),
  Backtransformed_Min_Year = min_year_back,
  
  Expected_Max_Year = max(TD$year),
  Backtransformed_Max_Year = max_year_back
)

plot(TD$year, TD$year.std)
```

```{r}
#| label: Check data distributions
#| fig-height: 8
#| fig-width: 12

# Check distribution of EPT abundance
hist(TD$Abund, main = "Distribution of EPT Abundance", breaks = 30, col = "steelblue")
hist(TD$SppRich, main = "Distribution of EPT species richness", breaks = 30, col = "steelblue")
hist(TD$Turnover, main = "Distribution of EPT Turnover", breaks = 30, col = "steelblue")
```

## Create filtered dataset for overall model

```{r}
TD_red <- TD |> 
  filter(year >= 1974 & year <= 1996)
```

# Abundance models

## Check non-linearity of abundance

```{r}
library(mgcv)

mod_gam <- gam(Abund ~ s(year), 
                        data = TD_red)

plot(mod_gam)
```

## Fit the abundance models in GLMTMB

```{r}
#| label: Fitting models for abundance

# Fit overall model with trap as a random effect
mod_overall <- glmmTMB(Abund ~ year.std, 
                        family = nbinom2, 
                        data = TD_red)

mod_overall1 <- glmmTMB(Abund ~ year.std + (1 | ftrap), 
                        family = nbinom2, 
                        data = TD_red)

mod_overall2 <- glmmTMB(Abund ~ year.std + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = nbinom2, 
                        data = TD_red)

mod_overall3 <- glmmTMB(Abund ~ poly(year.std, 1) + (1 | ftrap), 
                        family = nbinom2, 
                        data = TD_red)

mod_overall4 <- glmmTMB(Abund ~ poly(year.std, 1) + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = nbinom2, 
                        data = TD_red)

AIC(mod_overall, mod_overall1, mod_overall2, mod_overall3, mod_overall4)

# Fit separate models for each trap
trap_models <- lapply(levels(TD$ftrap), function(t) {
  glmmTMB(Abund ~ 
          year.std,
          # poly(year.std, 5),
          family = nbinom2, 
          data = TD[TD$ftrap == t, ])
})

# Store model names
names(trap_models) <- levels(TD$ftrap)
```

## Model validation

### Overall model

```{r}
#| label: Abundance overall model validation
#| fig-height: 8
#| fig-width: 12

# Simulated residual diagnostics
simulation_output <- simulateResiduals(mod_overall4)
plot(simulation_output)

# Check for temporal autocorrelation in residuals
acf(residuals(mod_overall4), main = "Autocorrelation of Residuals")

# Plot the scaled quantile residuals versus each covariate in the model.
plotResiduals(simulation_output, form = TD_red$year)   # Some trouble.
plotResiduals(simulation_output, form = TD_red$ftrap)  # Some trouble.
```

### Individual trap models

```{r}
#| label: Abundance trap specific model validations
#| fig-height: 8
#| fig-width: 12

# Validate individual trap models
validation_results <- lapply(trap_models, function(model) {
  simulateResiduals(model)
})
par(mfrow = c(3, 3))  # Arrange plots in a grid
for (i in seq_along(trap_models)) {
  plot(validation_results[[i]])
}
par(mfrow = c(1, 1))
```

## Model outputs

```{r}
#| label: Abundance model outputs
#| fig-height: 8
#| fig-width: 12

# Table 1: Overall Model
tab_model(
  mod_overall4,
  show.ci = FALSE,
  transform = NULL,
  show.se = TRUE,  
  show.re.var = FALSE,
  p.style = "stars",  
  string.pred = "Predictor",
  string.est = "Estimate",
  CSS = list(
    css.table = "width: 100%;",
    css.tdata = "padding: 3px;"
  ),
  file = "Plots/EPT/EPT_abundance_overall_model.html"
)

# Table 2: Trap-specific Models
tab_model(
  trap_models,
  show.ci = FALSE,
  transform = NULL,
  show.se = TRUE,  
  p.style = "stars",  
  string.pred = "Predictor",
  string.est = "Estimate",
  dv.labels = names(trap_models),
  CSS = list(
    css.table = "width: 100%;",
    css.tdata = "padding: 3px;"
  ),
  file = "Plots/EPT/EPT_abundance_trap_models.html"
)
```

## Predictions

```{r}
#| label: Make abundance model predictions

# Get min/max year per trap
trap_ranges <- TD |> 
  group_by(ftrap) |> 
  summarise(
    min_year = min(year.std),
    max_year = max(year.std)
  )

# Generate predictions for each trap model, using observed time periods only
trap_predictions <- lapply(names(trap_models), function(t) {
  # Get the observed time range for this trap
  time_range <- trap_ranges |> filter(ftrap == t)
  
  new_data <- expand.grid(
    year.std = seq(time_range$min_year, time_range$max_year, length.out = 300),
    ftrap = t
  )
  
  preds <- predict(trap_models[[t]], newdata = new_data, type = "response", se.fit = TRUE)
  
  new_data <- new_data |>
    mutate(
      predicted = preds$fit,
      conf.low = preds$fit - 1.96 * preds$se.fit,
      conf.high = preds$fit + 1.96 * preds$se.fit
    )
  
  return(new_data)
})

# Combine all trap model predictions into one dataframe
MyData_traps <- bind_rows(trap_predictions)

# Create prediction data for the overall model (covering the full time period)
MyData_overall <- data.frame(
  year.std = seq(min(TD_red$year.std), max(TD_red$year.std), length.out = 300),
  ftrap = factor("Overall", levels = c("Overall", levels(TD_red$ftrap)))
)

# Get predictions for the overall model
pred_overall <- predict(mod_overall4, newdata = MyData_overall, type = "response", se.fit = TRUE, allow.new.levels = TRUE)
MyData_overall <- MyData_overall |>
  mutate(
    predicted = pred_overall$fit,
    conf.low = pred_overall$fit - 1.96 * pred_overall$se.fit,
    conf.high = pred_overall$fit + 1.96 * pred_overall$se.fit
  )
```

### Plot model

```{r}
#| label: Plot abundance models with original, unstandardized variables
#| fig-height: 8
#| fig-width: 12

# Define color and shape palette for traps
trap_colours <- hue_pal()(length(unique(TD$ftrap)))
names(trap_colours) <- levels(TD$ftrap)
trap_shapes <- setNames(rep(16:19, length.out = length(trap_colours)), levels(TD$ftrap))

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals
ggplot() +
  # geom_ribbon(data = MyData_traps, aes(x = year.std, ymin = conf.low, ymax = conf.high, fill = ftrap), alpha = 0.2) +
  geom_line(data = MyData_traps, aes(x = year.std, y = predicted, colour = ftrap), size = 1, alpha = 1) +
  geom_point(data = TD, aes(x = year.std, y = Abund, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  geom_ribbon(data = MyData_overall, aes(x = year.std, ymin = conf.low, ymax = conf.high), fill = "grey50", alpha = 0.3) +
  geom_line(data = MyData_overall, aes(x = year.std, y = predicted, linetype = ftrap), colour = "black", size = 2) +
  labs(
    title = "EPT Abundance Trends: Trap-Specific & Overall",
    x = "Standardized Year",
    y = "Predicted Abundance",
    colour = "Trap",
    fill = "Trap",
    shape = "Trap",
    linetype = "Model"
  ) +
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
    guides(
    shape = guide_legend(title = "Trap trends", override.aes = list(size = 5, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "Trap trends", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = "Trap trends"),
    linetype = guide_legend(title = "Overall trend", override.aes = list(size = 1.5))
  ) +
  scale_x_continuous(breaks = seq(floor(min(TD$year.std)), ceiling(max(TD$year.std)), by = 0.5)) +
  scale_y_continuous(breaks = seq(0, 45000, by = 5000)) +
  coord_cartesian(ylim = c(0, 45000)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16, face = "bold"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  )

```

### Plot model with back transformation

```{r}
#| label: Plot abundance models with back transformed variables
#| fig-height: 8
#| fig-width: 12

# Backtransform year.std to original year scale
TD_mean_year <- mean(TD$year)
TD_sd_year <- sd(TD$year)

MyData_traps <- MyData_traps |>
  mutate(year = (year.std * TD_sd_year) + TD_mean_year)

MyData_overall <- MyData_overall |>
  mutate(year = (year.std * TD_sd_year) + TD_mean_year)

# Define color and shape palette for traps
trap_colours <- hue_pal()(length(unique(TD$ftrap)))
names(trap_colours) <- levels(TD$ftrap)
trap_shapes <- setNames(rep(16:19, length.out = length(trap_colours)), levels(TD$ftrap))

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals
ept_abundance_plot <- ggplot() +
  # Confidence ribbons for individual trap models
  geom_ribbon(data = MyData_traps, aes(x = year, ymin = conf.low, ymax = conf.high, fill = ftrap), alpha = 0.2) +
  # Individual trap predictions
  geom_line(data = MyData_traps, aes(x = year, y = predicted, colour = ftrap), size = 1, alpha = 1) +
  # Raw data points for reference (backtransformed x-axis)
  geom_point(data = TD, aes(x = year, y = Abund, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  # Confidence interval for overall trend
  # geom_ribbon(data = MyData_overall, aes(x = year, ymin = conf.low, ymax = conf.high), fill = "grey50", alpha = 0.3) +
  # Overall model trend line
  geom_line(data = MyData_overall, aes(x = year, y = predicted, linetype = ftrap), colour = "black", size = 2) +
  labs(
    # title = "EPT Abundance Trends: Trap-Specific & Overall",
    x = "Year",  # Now in original units
    y = "Abundance",
    colour = "",
    fill = "",
    shape = "",
    linetype = "Model"
  ) +
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
  guides(
    shape = guide_legend(title = "", override.aes = list(size = 6, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = ""),
    linetype = guide_legend(title = "", override.aes = list(size = 2))
  ) +
  # Ensure predictions span the full range (1970-2005)
  scale_x_continuous(limits = c(1970, 2005), breaks = seq(1970, 2005, by = 5)) +
  scale_y_continuous(breaks = seq(0, 45000, by = 5000)) +
  coord_cartesian(ylim = c(0, 45000)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),              # Increased from 9 to 14
    legend.title = element_text(size = 16, face = "bold"), # Increased from 10 to 16
    legend.position = "bottom",
    legend.margin = margin(t = 10),
    legend.key.size = unit(1.8, "lines"),              # Increased from 1.2 to 1.8
    legend.key.width = unit(2, "lines"),               # Added for wider legend keys
    legend.spacing.x = unit(0.3, "cm"),                # Added spacing between legend items
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  ) +
  guides(
    color = guide_legend(nrow = 1, byrow = TRUE),
    fill = guide_legend(nrow = 1, byrow = TRUE),
    shape = guide_legend(nrow = 1, byrow = TRUE)
  )
ept_abundance_plot

# Save the plot
saveRDS(ept_abundance_plot, "Plots/EPT/EPT_abundance_model.rds")
ggsave("Plots/EPT/EPT_abundance_model.png", plot = ept_abundance_plot, width = 8, height = 7, dpi = 300, bg = "white")
```

```{r}
#| label: Plot abundance models (in thousands) with back transformed variables
#| fig-height: 8
#| fig-width: 12

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals (Scaled)
ept_abundance_plot <- ggplot() +
  # Confidence ribbons for individual trap models (scaled by 1000)
  geom_ribbon(data = MyData_traps, aes(x = year, ymin = conf.low/1000, ymax = conf.high/1000, fill = ftrap), alpha = 0.2) +
  
  # Individual trap predictions (scaled by 1000)
  geom_line(data = MyData_traps, aes(x = year, y = predicted/1000, colour = ftrap), size = 1, alpha = 1) +
  
  # Raw data points for reference (scaled by 1000)
  geom_point(data = TD, aes(x = year, y = Abund/1000, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  
  # Confidence interval for overall trend
  # geom_ribbon(data = MyData_overall, aes(x = year, ymin = conf.low/1000, ymax = conf.high/1000), fill = "grey50", alpha = 0.3) +
  
  # Overall model trend line (scaled by 1000)
  geom_line(data = MyData_overall, aes(x = year, y = predicted/1000, linetype = ftrap), colour = "black", size = 2) +
  labs(
    title = "EPT",
    x = "Year",  # Now in original units
    y = "Abundance (in thousands)",
    colour = "",
    fill = "",
    shape = "",
    linetype = "Model"
  ) +
  
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
  
  guides(
    shape = guide_legend(title = "", override.aes = list(size = 6, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = ""),
    linetype = guide_legend(title = "", override.aes = list(size = 2))
  ) +
  
  # Ensure predictions span the full range (1970-2005)
  scale_x_continuous(limits = c(1970, 2005), breaks = seq(1970, 2005, by = 5)) +
  
  # Updated y-axis scale (now in thousands)
  scale_y_continuous(breaks = seq(0, 45, by = 5)) +
  coord_cartesian(ylim = c(0, 45)) +
  
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),              # Increased from 9 to 14
    legend.title = element_text(size = 16, face = "bold"), # Increased from 10 to 16
    legend.position = "bottom",
    legend.margin = margin(t = 10),
    legend.key.size = unit(1.8, "lines"),              # Increased from 1.2 to 1.8
    legend.key.width = unit(2, "lines"),               # Added for wider legend keys
    legend.spacing.x = unit(0.3, "cm"),                # Added spacing between legend items
    title = element_text(size = 16, face = "bold", hjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  ) +
  guides(
    color = guide_legend(nrow = 1, byrow = TRUE),
    fill = guide_legend(nrow = 1, byrow = TRUE),
    shape = guide_legend(nrow = 1, byrow = TRUE)
  )
ept_abundance_plot

# Save the plot
saveRDS(ept_abundance_plot, "Plots/EPT/EPT_abundance_model_thousand.rds")
ggsave("Plots/EPT/EPT_abundance_model_thousand.png", plot = ept_abundance_plot, width = 8, height = 7, dpi = 300, bg = "white")
```

```{r}
#| label: Compare abundance model outputs with standard ggplot2 outputs
#| fig-height: 8
#| fig-width: 12

TD |>
  ggplot(aes(y = Abund, x = year, colour = ftrap, fill = ftrap)) +
  geom_smooth(method = "lm", se = TRUE, aes(colour = ftrap), method.args = list(family = "nbinomial")) +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  labs(y = "EPT Abundance",
       x = "Year",
       colour = "Trap",
       fill = "Trap") +
  scale_x_continuous(limits = c(1969, 2005)) +
  ylim(range(TD$Abund)) +
  My_theme +
  scale_colour_manual(values = trap_colours, name = "Trap") +
  scale_fill_manual(values = trap_colours, name = "Trap") +
  guides(
    colour = guide_legend(title = "Trap", override.aes = list(size = 4, alpha = 1)),
    fill = "none"
  )

TD_red |>
  ggplot(aes(y = Abund, x = year)) +
  geom_smooth(method = "gam",  se = TRUE) +
  # geom_smooth(method = "lm",  se = TRUE, method.args = list(family = "nbinomial")) +
  # geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE, method.args = list(family = "nbinomial")) +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  labs(y = "EPT Abundance",
       x = "Year",
       colour = "Trap",
       fill = "Trap") +
  scale_x_continuous(limits = c(1969, 2005)) +
  ylim(range(TD$Abund)) +
  My_theme +
  guides(
    colour = guide_legend(title = "Trap", override.aes = list(size = 4, alpha = 1)),
    fill = "none"
  )
```

# Species Richness Models

## Species richness models in GLMTMB

```{r}
#| label: Choose best distribution to use for species richness models

# Poisson Model (may be too restrictive)
mod_poisson <- glmmTMB(SppRich ~ year.std, 
                        family = poisson, 
                        data = TD_red)

# Gamma Model (if data is continuous and positive)
mod_gamma <- glmmTMB(SppRich ~ year.std, 
                        family = Gamma(link = "log"), 
                        data = TD_red)

# Gaussian Model (if species richness is approximately normal)
mod_gaussian <- glmmTMB(SppRich ~ year.std, 
                        family = gaussian(link = "identity"), 
                        data = TD_red)

mod_gam <- gam(SppRich ~ s(year.std), 
                        data = TD_red)

plot(mod_gam)

# Compare models using AIC
AIC(mod_poisson, mod_gamma, mod_gaussian, mod_gam)
```

## Fit Gaussian model in GLMTMB

```{r}
#| label: Fitting models for species richness

# Base model (no random effects)
spp_mod_overall <- glmmTMB(SppRich ~ year.std, 
                        family = Gamma(link = "log"), 
                        data = TD_red)

# Model with trap as a random effect
spp_mod_overall1 <- glmmTMB(SppRich ~ year.std + (1 | ftrap), 
                        family = Gamma(link = "log"), 
                        data = TD_red)

# Model with trap as a random effect and AR(1) autocorrelation
spp_mod_overall2 <- glmmTMB(SppRich ~ year.std + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = Gamma(link = "log"),  
                        data = TD_red)

# 2nd degree Polynomial with trap as a random effect and AR(1) autocorrelation
spp_mod_overall3 <- glmmTMB(SppRich ~ poly(year.std, 2) + (1 | ftrap),
                        family = Gamma(link = "log"), 
                        data = TD_red)

# 2nd degree Polynomial with trap as a random effect and AR(1) autocorrelation
spp_mod_overall4 <- glmmTMB(SppRich ~ poly(year.std, 2) + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = Gamma(link = "log"),  
                        data = TD_red)

# Compare models
AIC(spp_mod_overall, spp_mod_overall1, spp_mod_overall2, spp_mod_overall3, spp_mod_overall4)

spp_trap_models <- lapply(levels(TD$ftrap), function(t) {
  glmmTMB(SppRich ~ year.std, 
          family = Gamma(link = "log"), 
          data = TD[TD$ftrap == t, ])
})

# Store model names
names(spp_trap_models) <- levels(TD$ftrap)

```

## Model validation

### Overall model

```{r}
#| label: Species richness overall model validation
#| fig-height: 8
#| fig-width: 12

# Simulated residual diagnostics
simulation_output <- simulateResiduals(spp_mod_overall4)
plot(simulation_output)

# Check for temporal autocorrelation in residuals
acf(residuals(spp_mod_overall4), main = "Autocorrelation of Residuals")

# Plot the scaled quantile residuals versus each covariate in the model.
plotResiduals(simulation_output, form = TD_red$year)   # Some trouble.
plotResiduals(simulation_output, form = TD_red$ftrap)  # Some trouble.
```

### Individual trap models

```{r}
#| label: Species richness trap specific model validations
#| fig-height: 8
#| fig-width: 12

# Validate individual trap models
validation_results <- lapply(spp_trap_models, function(model) {
  simulateResiduals(model)
})

# Plot residual diagnostics for each trap model
par(mfrow = c(3, 3))  # Arrange plots in a grid
for (i in seq_along(spp_trap_models)) {
  plot(validation_results[[i]])
}
par(mfrow = c(1, 1))
```

## Model outputs

```{r}
#| label: Species richness model outputs
#| fig-height: 8
#| fig-width: 12

# Define backtransformation function
backtransform <- function(x) {
  original_mean <- mean(TD$year, na.rm = TRUE)
  original_sd <- sd(TD$year, na.rm = TRUE)
  x * original_sd + original_mean
}


# Table 1: Overall Model
tab_model(
  spp_mod_overall4,
  show.ci = FALSE,
  transform = NULL,
  show.se = TRUE,  
  show.re.var = FALSE,
  p.style = "stars",  
  string.pred = "Predictor",
  string.est = "Estimate",
  CSS = list(
    css.table = "width: 100%;",
    css.tdata = "padding: 3px;"
  ),
  file = "Plots/EPT/EPT_sppRich_overall_model.html"
)

# Table 2: Trap-specific Models
tab_model(
  spp_trap_models,
  show.ci = FALSE,
  transform = NULL,
  show.se = TRUE,  
  p.style = "stars",  
  string.pred = "Predictor",
  string.est = "Estimate",
  dv.labels = names(trap_models),
  CSS = list(
    css.table = "width: 100%;",
    css.tdata = "padding: 3px;"
  ),
  file = "Plots/EPT/EPT_sppRich_trap_models.html"
)
```

## Predictions

```{r}
#| label: Make species richness model predictions

# Get min/max year per trap
trap_ranges <- TD |> 
  group_by(ftrap) |> 
  summarise(
    min_year = min(year.std),
    max_year = max(year.std)
  )

# Generate predictions for each trap model
trap_predictions <- lapply(names(spp_trap_models), function(t) {
  time_range <- trap_ranges |> filter(ftrap == t)
  
  new_data <- expand.grid(
    year.std = seq(time_range$min_year, time_range$max_year, length.out = 300),
    ftrap = t
  )
  
  preds <- predict(spp_trap_models[[t]], newdata = new_data, type = "response", se.fit = TRUE)
  
  new_data <- new_data |>
    mutate(
      predicted = preds$fit,
      conf.low = predicted - 1.96 * preds$se.fit,
      conf.high = predicted + 1.96 * preds$se.fit
    )
  
  return(new_data)
})

# Combine all predictions into one dataframe
MyData_traps <- bind_rows(trap_predictions)

# Create new data for overall model
MyData_overall <- data.frame(
  year.std = seq(min(TD_red$year.std), max(TD_red$year.std), length.out = 300),
  ftrap = factor("Overall", levels = c("Overall", levels(TD_red$ftrap)))
)

# Get predictions
pred_overall <- predict(spp_mod_overall4, 
                        newdata = MyData_overall, 
                        type = "response", 
                        se.fit = TRUE, 
                        allow.new.levels = TRUE)

# Store predictions
MyData_overall <- MyData_overall |>
  mutate(
    predicted = pred_overall$fit,
    conf.low = predicted - 1.96 * pred_overall$se.fit,
    conf.high = predicted + 1.96 * pred_overall$se.fit
  )
```

## Plot model

```{r}
#| label: Plot species richness models with original, unstandardized variables
#| fig-height: 8
#| fig-width: 12

# Ensure ftrap is a factor
MyData_traps$ftrap <- factor(MyData_traps$ftrap, levels = levels(TD$ftrap))
MyData_overall$ftrap <- factor("Overall", levels = c("Overall", levels(TD$ftrap)))

# Define color and shape palette for traps
trap_colours <- hue_pal()(length(unique(TD$ftrap)))
names(trap_colours) <- levels(TD$ftrap)
trap_shapes <- setNames(rep(16:19, length.out = length(trap_colours)), levels(TD$ftrap))

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals
ggplot() +
  geom_line(data = MyData_traps, aes(x = year.std, y = predicted, colour = ftrap), size = 1, alpha = 1) +
  geom_point(data = TD, aes(x = year.std, y = SppRich, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  geom_ribbon(data = MyData_overall, aes(x = year.std, ymin = conf.low, ymax = conf.high), fill = "grey50", alpha = 0.3) +
  geom_line(data = MyData_overall, aes(x = year.std, y = predicted, linetype = ftrap), colour = "black", size = 2) +
  labs(
    title = "EPT Richness Trends: Trap-Specific & Overall",
    x = "Standardized Year",
    y = "Predicted Species Richness",
    colour = "Trap",
    fill = "Trap",
    shape = "Trap",
    linetype = "Model"
  ) +
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
  guides(
    shape = guide_legend(title = "Trap trends", override.aes = list(size = 5, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "Trap trends", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = "Trap trends"),
    linetype = guide_legend(title = "Overall trend", override.aes = list(size = 1.5))
  ) +
  scale_x_continuous(breaks = seq(floor(min(TD$year.std)), ceiling(max(TD$year.std)), by = 0.5)) +
  scale_y_continuous(breaks = seq(20, 60, by = 10)) +
  coord_cartesian(ylim = c(20, 60)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16, face = "bold"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  )
```

## **Plot model with back transformation**

```{r}
#| label: Plot species richness models with back transformed variables
#| fig-height: 8
#| fig-width: 12

# Backtransform year.std to original year scale
TD_mean_year <- mean(TD$year)
TD_sd_year <- sd(TD$year)

MyData_traps <- MyData_traps |>
  mutate(year = (year.std * TD_sd_year) + TD_mean_year)

MyData_overall <- MyData_overall |>
  mutate(year = (year.std * TD_sd_year) + TD_mean_year)

# Define color and shape palette for traps
trap_colours <- hue_pal()(length(unique(TD$ftrap)))
names(trap_colours) <- levels(TD$ftrap)
trap_shapes <- setNames(rep(16:19, length.out = length(trap_colours)), levels(TD$ftrap))

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals
ept_spprich_plot <- ggplot() +
  geom_line(data = MyData_traps, aes(x = year, y = predicted, colour = ftrap), size = 1, alpha = 1) +
  geom_ribbon(data = MyData_traps, aes(x = year, ymin = conf.low, ymax = conf.high, fill = ftrap), alpha = 0.2) +
  geom_point(data = TD, aes(x = year, y = SppRich, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  # geom_ribbon(data = MyData_overall, aes(x = year, ymin = conf.low, ymax = conf.high), fill = "grey50", alpha = 0.3) +
  geom_line(data = MyData_overall, aes(x = year, y = predicted, linetype = ftrap), colour = "black", size = 2) +
  labs(
    # title = "EPT Richness Trends: Trap-Specific & Overall",
    x = "Year",
    y = "Species richness (q = 0)",
    colour = "",
    fill = "",
    shape = "",
    linetype = "Model"
  ) +
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
  guides(
    shape = guide_legend(title = "", override.aes = list(size = 6, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = ""),
    linetype = guide_legend(title = "", override.aes = list(size = 2))
  ) +
  scale_x_continuous(limits = c(1970, 2005), breaks = seq(1970, 2005, by = 5)) +
  scale_y_continuous(breaks = seq(20, 60, by = 10)) +
  coord_cartesian(ylim = c(20, 60)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),              # Increased from 9 to 14
    legend.title = element_text(size = 16, face = "bold"), # Increased from 10 to 16
    legend.position = "bottom",
    legend.margin = margin(t = 10),
    legend.key.size = unit(1.8, "lines"),              # Increased from 1.2 to 1.8
    legend.key.width = unit(2, "lines"),               # Added for wider legend keys
    legend.spacing.x = unit(0.3, "cm"),                # Added spacing between legend items
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  ) +
  guides(
    color = guide_legend(nrow = 1, byrow = TRUE),
    fill = guide_legend(nrow = 1, byrow = TRUE),
    shape = guide_legend(nrow = 1, byrow = TRUE)
  )
ept_spprich_plot

# Save the plot
saveRDS(ept_spprich_plot, "Plots/EPT/EPT_sppRich_model.rds")
ggsave("Plots/EPT/EPT_sppRich_model.png", plot = ept_spprich_plot, width = 8, height = 7, dpi = 300, bg = "white")
```

```{r}
#| label: Compare species richness model outputs with standard ggplot2 outputs
#| fig-height: 8
#| fig-width: 12

TD |>
  ggplot(aes(y = SppRich, x = year, colour = ftrap, fill = ftrap)) +
  geom_smooth(method = "lm", se = TRUE, aes(colour = ftrap), method.args = list(family = "gaussian")) +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  labs(y = "EPT Richness",
       x = "Year",
       colour = "Trap",
       fill = "Trap") +
  scale_x_continuous(limits = c(1969, 2005)) +
  ylim(range(TD$SppRich)) +
  My_theme +
  scale_colour_manual(values = trap_colours, name = "Trap") +
  scale_fill_manual(values = trap_colours, name = "Trap") +
  guides(
    colour = guide_legend(title = "Trap", override.aes = list(size = 4, alpha = 1)),
    fill = "none"
  )

TD_red |>
  ggplot(aes(y = SppRich, x = year)) +
  geom_smooth(method = "gam",  se = TRUE) +
  # geom_smooth(method = lm, formula = y ~ splines::bs(x, 2), se = TRUE, method.args = list(family = "gaussian")) +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  labs(y = "EPT Richness",
       x = "Year",
       colour = "Trap",
       fill = "Trap") +
  scale_x_continuous(limits = c(1969, 2005)) +
  ylim(range(TD$SppRich)) +
  My_theme +
  guides(
    colour = guide_legend(title = "Trap", override.aes = list(size = 4, alpha = 1)),
    fill = "none"
  )
```

# Turnover Models

## Turnover models with GLMTMB

```{r}
#| label: Choose best distribution to use for turnover models

TD_turn <- TD |>
  filter(complete.cases(TD))

TD_turn_red <- TD_red |>
  filter(complete.cases(TD_red))

# Poisson Model (may be too restrictive)
mod_poisson <- glmmTMB(Turnover ~ year.std, 
                        family = poisson, 
                        data = TD_turn_red)

# Gamma Model (if data is continuous and positive)
mod_beta <- glmmTMB(Turnover ~ year.std, 
                     family = beta_family(link = "logit"), 
                     data = TD_turn_red)

# Gaussian Model (if species richness is approximately normal)
mod_gaussian <- glmmTMB(Turnover ~ year.std, 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

mod_gam <- gam(Turnover ~ s(year.std), 
                        data = TD_turn_red)

plot(mod_gam)

# Compare models using AIC
AIC(mod_poisson, mod_beta, mod_gaussian, mod_gam)
```

## Fit Gaussian model in GLMTMB

```{r}
#| label: Fitting models for turnover

# Base model (no random effects)
turn_mod_overall <- glmmTMB(Turnover ~ year.std, 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

# Model with trap as a random effect
turn_mod_overall1 <- glmmTMB(Turnover ~ year.std + (1 | ftrap), 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

# Model with trap as a random effect and AR(1) autocorrelation
turn_mod_overall2 <- glmmTMB(Turnover ~ year.std + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

# 2nd degree polynomial with trap as a random effect
turn_mod_overall3 <- glmmTMB(Turnover ~ poly(year.std, 2) + (1 | ftrap), 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

# 2nd degree polynomial with trap as a random effect and AR(1) autocorrelation
turn_mod_overall4 <- glmmTMB(Turnover ~ poly(year.std, 2) + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

# 3rd degree polynomial with trap as a random effect and AR(1) autocorrelation
turn_mod_overall5 <- glmmTMB(Turnover ~ poly(year.std, 3) + (1 | ftrap) + ar1(0 + factor(year.std) | ftrap), 
                        family = gaussian(link = "logit"), 
                        data = TD_turn_red)

# Compare models
AIC(turn_mod_overall, turn_mod_overall1, turn_mod_overall2, turn_mod_overall3, turn_mod_overall4, turn_mod_overall5)

turn_trap_models <- lapply(levels(TD_turn$ftrap), function(t) {
  glmmTMB(Turnover ~ year.std, 
          family = gaussian(link = "logit"), 
          data = TD_turn[TD_turn$ftrap == t, ])
})

# Store model names
names(turn_trap_models) <- levels(TD_turn$ftrap)
```

## Model validation

### Overall model

```{r}
#| label: Turnover overall model validation
#| fig-height: 8
#| fig-width: 12

# Simulated residual diagnostics
simulation_output <- simulateResiduals(turn_mod_overall4)
plot(simulation_output)

# Check for temporal autocorrelation in residuals
acf(residuals(turn_mod_overall4), main = "Autocorrelation of Residuals")

# Plot the scaled quantile residuals versus each covariate in the model.
plotResiduals(simulation_output, form = TD_turn_red$year)   # Some trouble.
plotResiduals(simulation_output, form = TD_turn_red$ftrap)  # Some trouble.
```

### Individual trap models

```{r}
#| label: Trunover trap specific model validations
#| fig-height: 8
#| fig-width: 12

# Validate individual trap models
validation_results <- lapply(turn_trap_models, function(model) {
  simulateResiduals(model)
})

# Plot residual diagnostics for each trap model
par(mfrow = c(3, 3))  # Arrange plots in a grid
for (i in seq_along(turn_trap_models)) {
  plot(validation_results[[i]])
}
par(mfrow = c(1, 1))
```

## Model outputs

```{r}
#| label: Turnover model outputs
#| fig-height: 8
#| fig-width: 12

# Define backtransformation function
# backtransform <- function(x) {
#   original_mean <- mean(TD$year, na.rm = TRUE)
#   original_sd <- sd(TD$year, na.rm = TRUE)
#   x * original_sd + original_mean
# }

# Table 1: Overall Model
tab_model(
  turn_mod_overall4,
  show.ci = FALSE,
  transform = NULL,
  show.se = TRUE,  
  show.re.var = FALSE,
  p.style = "stars",  
  string.pred = "Predictor",
  string.est = "Estimate",
  CSS = list(
    css.table = "width: 100%;",
    css.tdata = "padding: 3px;"
  ),
  file = "Plots/EPT/EPT_turnover_overall_model.html"
)

# Table 2: Trap-specific Models
tab_model(
  turn_trap_models,
  show.ci = FALSE,
  transform = NULL,
  show.se = TRUE,  
  p.style = "stars",  
  string.pred = "Predictor",
  string.est = "Estimate",
  dv.labels = names(trap_models),
  CSS = list(
    css.table = "width: 100%;",
    css.tdata = "padding: 3px;"
  ),
  file = "Plots/EPT/EPT_turnover_trap_models.html"
)
```

## Predictions

```{r}
#| label: Make turnover model predictions

# Get min/max year per trap
trap_ranges <- TD_turn |> 
  group_by(ftrap) |> 
  summarise(
    min_year = min(year.std),
    max_year = max(year.std)
  )

# Generate predictions for each trap model
trap_predictions <- lapply(levels(TD_turn$ftrap), function(t) {
  time_range <- trap_ranges |> filter(ftrap == t)

  new_data <- expand.grid(
    year.std = seq(time_range$min_year, time_range$max_year, length.out = 300),
    ftrap = t
  )

  preds <- predict(turn_trap_models[[t]], newdata = new_data, type = "response", se.fit = TRUE)

  new_data <- new_data |>
    mutate(
      predicted = preds$fit,
      conf.low = predicted - 1.96 * preds$se.fit,
      conf.high = predicted + 1.96 * preds$se.fit
    )

  return(new_data)
})

# Combine all predictions into one dataframe
MyData_traps <- bind_rows(trap_predictions)

# Create a new dataset for predictions across the full time range
MyData_overall <- data.frame(
  year.std = seq(min(TD_turn_red$year.std), max(TD_turn_red$year.std), length.out = 300),
  ftrap = factor("Overall", levels = c("Overall", levels(TD_turn_red$ftrap)))
)

# Get predictions, allowing new factor levels
pred_overall <- predict(turn_mod_overall4, 
                        newdata = MyData_overall, 
                        type = "response", 
                        se.fit = TRUE, 
                        allow.new.levels = TRUE)

# Store predictions with confidence intervals
MyData_overall <- MyData_overall |>
  mutate(
    predicted = pred_overall$fit,
    conf.low = predicted - 1.96 * pred_overall$se.fit,
    conf.high = predicted + 1.96 * pred_overall$se.fit
  )

```

## Plot model

```{r}
#| label: Plot turnover models with original, unstandardized variables
#| fig-height: 8
#| fig-width: 12

# Ensure ftrap is a factor with correct levels
MyData_traps$ftrap <- factor(MyData_traps$ftrap, levels = levels(TD$ftrap))
MyData_overall$ftrap <- factor("Overall", levels = c("Overall", levels(TD$ftrap)))

# Define color and shape palette for traps
trap_colours <- hue_pal()(length(unique(TD$ftrap)))
names(trap_colours) <- levels(TD$ftrap)
trap_shapes <- setNames(rep(16:19, length.out = length(trap_colours)), levels(TD$ftrap))

# Convert standardized year back to original year for plotting
MyData_traps$year <- MyData_traps$year.std * sd(TD$year) + mean(TD$year)
MyData_overall$year <- MyData_overall$year.std * sd(TD$year) + mean(TD$year)
TD$year <- TD$year.std * sd(TD$year) + mean(TD$year)

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals
ggplot() +
  geom_line(data = MyData_traps, aes(x = year.std, y = predicted, colour = ftrap), size = 1, alpha = 1) +
  geom_point(data = TD, aes(x = year.std, y = Turnover, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  geom_ribbon(data = MyData_overall, aes(x = year.std, ymin = conf.low, ymax = conf.high), fill = "grey50", alpha = 0.3) +
  geom_line(data = MyData_overall, aes(x = year.std, y = predicted, linetype = ftrap), colour = "black", size = 2) +
  labs(
    title = "EPT Turnover Trends: Trap-Specific & Overall",
    x = "Year",
    y = "Predicted Turnover",
    colour = "Trap",
    fill = "Trap",
    shape = "Trap",
    linetype = "Model"
  ) +
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
  guides(
    shape = guide_legend(title = "Trap trends", override.aes = list(size = 5, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "Trap trends", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = "Trap trends"),
    linetype = guide_legend(title = "Overall trend", override.aes = list(size = 1.5))
  ) +
  scale_y_continuous(breaks = seq(0, 0.6, by = 0.1)) +
  coord_cartesian(ylim = c(0, 0.6)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16, face = "bold"),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  )

```

## **Plot model with back transformation**

```{r}
#| label: Plot turnover models with back transformed variables
#| fig-height: 8
#| fig-width: 12

# Ensure ftrap is a factor with correct levels
MyData_traps$ftrap <- factor(MyData_traps$ftrap, levels = levels(TD$ftrap))
MyData_overall$ftrap <- factor("Overall", levels = c("Overall", levels(TD$ftrap)))

# Define color and shape palette for traps
trap_colours <- hue_pal()(length(unique(TD$ftrap)))
names(trap_colours) <- levels(TD$ftrap)
trap_shapes <- setNames(rep(16:19, length.out = length(trap_colours)), levels(TD$ftrap))

# Convert standardized year back to original year for plotting
MyData_traps$year <- MyData_traps$year.std * sd(TD$year) + mean(TD$year)
MyData_overall$year <- MyData_overall$year.std * sd(TD$year) + mean(TD$year)
TD$year <- TD$year.std * sd(TD$year) + mean(TD$year)

# Plot: Individual Trap Trends & Overall Trend with Confidence Intervals
ept_turnover_plot <- ggplot() +
  geom_line(data = MyData_traps, aes(x = year, y = predicted, colour = ftrap), size = 1, alpha = 1) +
  geom_ribbon(data = MyData_traps, aes(x = year, ymin = conf.low, ymax = conf.high, fill = ftrap), alpha = 0.2) +
  geom_point(data = TD, aes(x = year, y = Turnover, colour = ftrap, shape = ftrap, fill = ftrap), size = 5, alpha = 0.4) +
  # geom_ribbon(data = MyData_overall, aes(x = year, ymin = conf.low, ymax = conf.high), fill = "grey50", alpha = 0.3) +
  geom_line(data = MyData_overall, aes(x = year, y = predicted, linetype = ftrap), colour = "black", size = 2) +
  labs(
    # title = "EPT Turnover Trends: Trap-Specific & Overall",
    x = "Year",
    y = "Turnover",
    colour = "",
    fill = "",
    shape = "",
    linetype = "Model"
  ) +
  scale_colour_manual(values = trap_colours) +
  scale_fill_manual(values = trap_colours) +  
  scale_shape_manual(values = trap_shapes) +  
  scale_linetype_manual(values = c("Overall" = "solid", setNames(rep("solid", length(trap_colours)), names(trap_colours)))) +
  guides(
    shape = guide_legend(title = "", override.aes = list(size = 6, colour = trap_colours, fill = trap_colours, alpha = 1)), 
    fill = guide_legend(title = "", override.aes = list(alpha = 0.3)),  
    colour = guide_legend(title = ""),
    linetype = guide_legend(title = "", override.aes = list(size = 2))
  ) +
  scale_x_continuous(limits = c(1970, 2005), breaks = seq(1970, 2005, by = 5)) +
  scale_y_continuous(breaks = seq(0, 0.6, by = 0.1)) +
  coord_cartesian(ylim = c(0, 0.6)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14),
    legend.text = element_text(size = 14),              # Increased from 9 to 14
    legend.title = element_text(size = 16, face = "bold"), # Increased from 10 to 16
    legend.position = "bottom",
    legend.margin = margin(t = 10),
    legend.key.size = unit(1.8, "lines"),              # Increased from 1.2 to 1.8
    legend.key.width = unit(2, "lines"),               # Added for wider legend keys
    legend.spacing.x = unit(0.3, "cm"),                # Added spacing between legend items
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)
  ) +
  guides(
    color = guide_legend(nrow = 1, byrow = TRUE),
    fill = guide_legend(nrow = 1, byrow = TRUE),
    shape = guide_legend(nrow = 1, byrow = TRUE)
  )
ept_turnover_plot

# Save the plot
saveRDS(ept_turnover_plot, "Plots/EPT/EPT_turnover_model.rds")
ggsave("Plots/EPT/EPT_turnover_model.png", plot = ept_turnover_plot, width = 8, height = 7, dpi = 300, bg = "white")
```

```{r}
#| label: Compare turnover model outputs with standard ggplot2 outputs
#| fig-height: 8
#| fig-width: 12

TD_turn |>
  ggplot(aes(y = Turnover, x = year, colour = ftrap, fill = ftrap)) +
  geom_smooth(method = "lm", se = TRUE, aes(colour = ftrap), method.args = list(family = "gaussian")) +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  labs(y = "EPT Turnover",
       x = "Year",
       colour = "Trap",
       fill = "Trap") +
  scale_x_continuous(limits = c(1969, 2005)) +
  ylim(range(TD$Turnover)) +
  My_theme +
  scale_colour_manual(values = trap_colours, name = "Trap") +
  scale_fill_manual(values = trap_colours, name = "Trap") +
  guides(
    colour = guide_legend(title = "Trap", override.aes = list(size = 4, alpha = 1)),
    fill = "none"
  )

TD_turn_red |>
  ggplot(aes(y = Turnover, x = year)) +
  # geom_smooth(method = "lm",  se = TRUE) +
  geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE, method.args = list(family = "gaussian")) +
  geom_jitter(shape = 19, size = 3.5, height = 0.5,
              width = 0.5, alpha = 0.5) +
  labs(y = "EPT turnover",
       x = "Year",
       colour = "Trap",
       fill = "Trap") +
  scale_x_continuous(limits = c(1969, 2005)) +
  ylim(range(TD$Turnover)) +
  My_theme +
  guides(
    colour = guide_legend(title = "Trap", override.aes = list(size = 4, alpha = 1)),
    fill = "none"
  )
```
